---
import RecipeDivNorating from './recipe_div_norating.astro';
import Submit from './Submit.astro';
export interface Props {
    title: string,
    body?: string,
    url?: string,
	questionId?: string,
    usierId?: string,
	maxtime?: number,
    reccommendation?: string,
}


const {url = 'http://0.0.0.0/api/recipes/initial', title, body, questionId, maxtime=20000} = Astro.props;
const settings = '../../config.json'
const n = 30
const n_rec = []
Array.from({ length: n }, (x, i) => {n_rec.push(i)})

---
<li class="food-container-main">
	<div class="likard-cont-two" id={'div_' + questionId}>
		<h3>
			{body}
		</h3>
	<div class="foodbg">
	<h2>Selection A</h2>
	<div id="first" class='food-container'>

	{n_rec.map((item) => (
		<>
		<RecipeDivNorating id={`${item}`} title='Yes'></RecipeDivNorating>
		</>
	))}
	</div>
	</div>
	
	<div class="foodbg">
	<h2 id='B'>Selection B</h2>

	<div id="second" class='food-container'>

		{n_rec.map((item) => (
			<>
			<RecipeDivNorating id={`${item}`} title='Yes'></RecipeDivNorating>
			</>
		))}
		</div>
	</div>
	</div>
</li>

<script is:inline define:vars={{maxtime, url}} defer>
    // Function that grabs dynamicly delivered Recipes based on userId
    // This will need to be inserted into the main form page, and not on each 
    // component, as we only want to run it once!

	//====================== API FETCH ======================

	async function getRecipes(url) {
		response = await fetch(url)
		return response.json()
	}

	async function getImage(url) {
		response = await(fetch(url))
		return response.json()
	}
	//====================== Recipe Loader ======================

	const loader = document.querySelector('#loading')

    async function loadContent() {
		uID = await getCookie('uId')
		console.log(uID)
		var data2 = await getRecipes(`http://0.0.0.0/api/recommendation/${uID}/VCS`)
		console.log(data2)
		while (data2.recipes.length === 0) {
			data2 = await getRecipes(`http://0.0.0.0/api/recommendation/${uID}/VCS`)
		}
		data2.recipes.map((element, index) => {
			first = document.getElementById('second')
			holder = first.querySelector(`#recipe_holder_${index}`)
			image = holder.querySelector('#recipe_image')
			title = holder.querySelector('#title')
			// content = holder.querySelector('#content')
			
			console.log(element.recipe.recipe)
			holder.dataset.id=element.recipe.recipe_id
			image.src = `http://0.0.0.0/api/images/${element.recipe.recipe_id}.jpg`
			image.alt = element.recipe.recipe_id
			title.textContent = element.recipe.recipe_name
			// content.textContent = element.recipe.description
			console.log(element.recipe.recipe_id)
		})

		var data = await getRecipes(`http://0.0.0.0/api/recommendation/${uID}/CF`)
		console.log(data)
		data.recipes.map((element, index) => {
			first = document.getElementById('first')
			holder = first.querySelector(`#recipe_holder_${index}`)
			image = holder.querySelector('#recipe_image')
			title = holder.querySelector('#title')
			// content = holder.querySelector('#content')
			
			console.log(element.recipe.recipe)
			holder.dataset.id=element.recipe.recipe_id
			image.src = `http://0.0.0.0/api/images/${element.recipe.recipe_id}.jpg`
			image.alt = element.recipe.recipe_id
			title.textContent = element.recipe.recipe_name
			// content.textContent = element.recipe.description
			console.log(element.recipe.recipe_id)
		})
		console.log(data)
		
        // var arr = Array.prototype.slice.call( collections )
        // arr.forEach(item => {
        //     getImages(item.id, call=url)
        // })
        
    }


		// const buttonRight = document.getElementById('Left');
		// const buttonLeft = document.getElementById('Right');

		// buttonRight.onclick = function () {
		// document.getElementById('container').scrollLeft += 20;
		// };
		// buttonLeft.onclick = function () {
		// document.getElementById('container').scrollLeft -= 20;
		// };
	async function getCookie(name) {
		var nameEQ = name + "=";
		var ca = document.cookie.split(';');
		for(var i=0;i < ca.length;i++) {
			var c = ca[i];
			while (c.charAt(0)==' ') c = c.substring(1,c.length);
			if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
		}
		return null;
	}
	loadContent()
    
</script>


<style>

	.foodbg {
		background-color: #fff;
		border-radius: .5rem;
		margin: 1rem 0 0 0;
	}

	main {
		max-width: 99%;
	}


	* { min-width: 0; min-height: 0; list-style: none;}

	.food-container {
		display: flex;
		overflow: hidden;
		margin: 1.5rem 0 0 0;
	}
	.likard-cont-mov {
		width: 96%;
		padding: 1em 1.3em;
		border-radius: 0.35rem;
		background-color: white;
		list-style: none;
	}

	.likard > .likard-cont-mov > .forms {
		display: flex;
		justify-content: center;
		padding-top: 1rem;
		padding-right: 1rem;
		}
	

	.likard > .likard-cont-mov > form{
		display: flex;
		flex-direction: row;
		list-style: none;
		padding-left: 0px;
	}
	.likard > .likard-cont-mov > form > label{
		flex-direction: column;
		width: 20%;
		list-style: none;
	}

    .poster {
        width: 100%;
        object-fit: contain;
    }

	.likard > .likard-cont-mov > div > form > span {
		padding-left: 4rem;
		display: inline-block;
	}
	
	.likard > .likard-cont-mov > div > form > span > input {		
		border: 0px;
    	height: 1rem;
		width: 100%;
	}

	.likard > .likard-cont-mov > form > span > label{
		padding-left: 1rem;
	}

	
	.likard > .likard-cont-mov > a{		
		text-decoration: none;
		line-height: 1.4;
		color: var(--text-color);		
	}

	h2 {
		margin: 1rem 0 0 1rem;
		display: inline-block;
		list-style: none;
	}
    
    p {
        margin-top: 0.75rem;
        margin-bottom: 0;
    }

	.likard:is(:hover, :focus-within) {
		background-position: 0;
	}

	.likard:is(:hover, :focus-within) h2 {
		color: #221f20;
		transform: translateX(2px);
	}
	
</style>

<!-- We have to make this global to avoid Astro hydrating it alongside the rest. -->
<style is:global>
	.clickableButton > [type=checkbox]:checked + img {
	border: 2px solid #F1F1F1;
}
</style>
